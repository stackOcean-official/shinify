# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
shinify <- function(ml_model, modeltype = "", title = "") {
#load required packages
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(shinythemes)){
install.packages("shinythemes")
library(shinythemes)
}
# set port for shiny server
options(shiny.port = 8000)
options(shiny.host = "0.0.0.0")
# set attr names from model (first = output, rest = input)
model_atributte <- paste(attr(ml_model$terms, "predvars"))
model_label <- model_atributte[-1]
input_label <- model_label[-1]
input_count <- length(input_label)
# sigmoid function to correct output if using a log_reg
sigmoid = function(x){
result = exp(x)/(1+exp(x))
return(result)
}
# Define UI
ui <- fluidPage(
theme = shinytheme("lumen"),
titlePanel(title),
sidebarLayout(
sidebarPanel(
# multipe inputs depending on number of expeced regressors from the ml model
numinputs <- lapply(1:input_count, function(i) {
numericInput(inputId = paste0("num", i), label = input_label[i], value = 0)
})
),
# Output
mainPanel(
h2(model_label[1]),
h2(textOutput(outputId = "prediction")),
tags$a(href = "https://stackocean.com", "provided by stackOcean", target = "_blank")
)
)
)
# Define server function
server <- function(input, output) {
output$prediction <- renderText({
df <- data.frame(matrix(ncol = input_count, nrow = 0))
colnames(df) <- input_label
df[1, ] <- reactiveValuesToList(input)
predicted_output = predict(ml_model, newdata = df)
if (modeltype = "log_reg"){
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
shinify <- function(ml_model, modeltype = "", title = "") {
#load required packages
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(shinythemes)){
install.packages("shinythemes")
library(shinythemes)
}
# set port for shiny server
options(shiny.port = 8000)
options(shiny.host = "0.0.0.0")
# set attr names from model (first = output, rest = input)
model_atributte <- paste(attr(ml_model$terms, "predvars"))
model_label <- model_atributte[-1]
input_label <- model_label[-1]
input_count <- length(input_label)
# sigmoid function to correct output if using a log_reg
sigmoid = function(x){
result = exp(x)/(1+exp(x))
return(result)
}
# Define UI
ui <- fluidPage(
theme = shinytheme("lumen"),
titlePanel(title),
sidebarLayout(
sidebarPanel(
# multipe inputs depending on number of expeced regressors from the ml model
numinputs <- lapply(1:input_count, function(i) {
numericInput(inputId = paste0("num", i), label = input_label[i], value = 0)
})
),
# Output
mainPanel(
h2(model_label[1]),
h2(textOutput(outputId = "prediction")),
tags$a(href = "https://stackocean.com", "provided by stackOcean", target = "_blank")
)
)
)
# Define server function
server <- function(input, output) {
output$prediction <- renderText({
df <- data.frame(matrix(ncol = input_count, nrow = 0))
colnames(df) <- input_label
df[1, ] <- reactiveValuesToList(input)
predicted_output = predict(ml_model, newdata = df)
if (modeltype == "log_reg"){
predicted_output = sigmoid(predicted_output)
}
paste(round(predicted_output, digits = 4))
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
}
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
shinify <- function(ml_model, modeltype = "", title = "") {
#load required packages
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(shinythemes)){
install.packages("shinythemes")
library(shinythemes)
}
# set port for shiny server
options(shiny.port = 8000)
options(shiny.host = "0.0.0.0")
# set attr names from model (first = output, rest = input)
model_atributte <- paste(attr(ml_model$terms, "predvars"))
model_label <- model_atributte[-1]
input_label <- model_label[-1]
input_count <- length(input_label)
# sigmoid function to correct output if using a log_reg
sigmoid = function(x){
result = exp(x)/(1+exp(x))
return(result)
}
# Define UI
ui <- fluidPage(
theme = shinytheme("lumen"),
titlePanel(title),
sidebarLayout(
sidebarPanel(
# multipe inputs depending on number of expeced regressors from the ml model
numinputs <- lapply(1:input_count, function(i) {
numericInput(inputId = paste0("num", i), label = input_label[i], value = 0)
})
),
# Output
mainPanel(
h2(model_label[1]),
h2(textOutput(outputId = "prediction")),
tags$a(href = "https://stackocean.com", "provided by stackOcean", target = "_blank")
)
)
)
# Define server function
server <- function(input, output) {
output$prediction <- renderText({
df <- data.frame(matrix(ncol = input_count, nrow = 0))
colnames(df) <- input_label
df[1, ] <- reactiveValuesToList(input)
predicted_output = predict(ml_model, newdata = df)
if (modeltype == "log_reg"){
predicted_output = sigmoid(predicted_output)
}
paste(round(predicted_output, digits = 4))
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
}
library(readr)
data = read_csv("data/pokemon.csv")
library(readr)
setwd("~/Code/KISU/shinify")
library(readr)
setwd("~/Code/KISU/kisu-hosting")
library(readr)
data = read.csv("data/pokemon.csv")
table(data$is_legendary)
summary(data)
legendary = data$is_legendary
attack = data$attack
defense = data$defense
data = data.frame(legendary, attack, defense)
data_train = data[1:(nrow(data)-100),]
data_test = data[(nrow(data)-99):nrow(data),]
log_reg = glm(legendary ~ attack + defense, data = data_train, family = binomial())
summary(log_reg)
setwd("~/Code/KISU/shinify")
data = read.csv("data/pokemon.csv")
data = read.csv("../data/pokemon.csv")
table(data$is_legendary)
legendary = data$is_legendary
attack = data$attack
defense = data$defense
data = data.frame(legendary, attack, defense)
data_train = data[1:(nrow(data)-100),]
data_test = data[(nrow(data)-99):nrow(data),]
log_reg = glm(legendary ~ attack + defense, data = data_train, family = binomial())
summary(log_reg)
library(shinify)
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
shinify <- function(ml_model, modeltype = "", title = "") {
#load required packages
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(shinythemes)){
install.packages("shinythemes")
library(shinythemes)
}
# set port for shiny server
options(shiny.port = 8000)
options(shiny.host = "0.0.0.0")
# set attr names from model (first = output, rest = input)
model_atributte <- paste(attr(ml_model$terms, "predvars"))
model_label <- model_atributte[-1]
input_label <- model_label[-1]
input_count <- length(input_label)
# sigmoid function to correct output if using a log_reg
sigmoid = function(x){
result = exp(x)/(1+exp(x))
return(result)
}
# Define UI
ui <- fluidPage(
theme = shinytheme("lumen"),
titlePanel(title),
sidebarLayout(
sidebarPanel(
# multipe inputs depending on number of expeced regressors from the ml model
numinputs <- lapply(1:input_count, function(i) {
numericInput(inputId = paste0("num", i), label = input_label[i], value = 0)
})
),
# Output
mainPanel(
h2(model_label[1]),
h2(textOutput(outputId = "prediction")),
tags$a(href = "https://stackocean.com", "provided by stackOcean", target = "_blank")
)
)
)
# Define server function
server <- function(input, output) {
output$prediction <- renderText({
df <- data.frame(matrix(ncol = input_count, nrow = 0))
colnames(df) <- input_label
df[1, ] <- reactiveValuesToList(input)
predicted_output = predict(ml_model, newdata = df)
if (modeltype == "log_reg"){
predicted_output = sigmoid(predicted_output)
}
paste(round(predicted_output, digits = 4))
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
}
library(shinify)
package(shinify)
shinify(log_reg, "your title here", "log_reg")
shinify(log_reg, "log_reg", "fancy title")
shinify(log_reg, modeltype = "log_reg", "fancy title")
shinify(log_reg, "fancy title" modeltype = "log_reg",)
shinify(log_reg, title = "fancy title" modeltype = "log_reg",)
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
shinify <- function(model, modeltype = "", title = "") {
#load required packages
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(shinythemes)){
install.packages("shinythemes")
library(shinythemes)
}
# set port for shiny server
options(shiny.port = 8000)
options(shiny.host = "0.0.0.0")
# set attr names from model (first = output, rest = input)
model_atributte <- paste(attr(model$terms, "predvars"))
model_label <- model_atributte[-1]
input_label <- model_label[-1]
input_count <- length(input_label)
# sigmoid function to correct output if using a log_reg
sigmoid = function(x){
result = exp(x)/(1+exp(x))
return(result)
}
# Define UI
ui <- fluidPage(
theme = shinytheme("lumen"),
titlePanel(title),
sidebarLayout(
sidebarPanel(
# multipe inputs depending on number of expeced regressors from the ml model
numinputs <- lapply(1:input_count, function(i) {
numericInput(inputId = paste0("num", i), label = input_label[i], value = 0)
})
),
# Output
mainPanel(
h2(model_label[1]),
h2(textOutput(outputId = "prediction")),
tags$a(href = "https://stackocean.com", "provided by stackOcean", target = "_blank")
)
)
)
# Define server function
server <- function(input, output) {
output$prediction <- renderText({
df <- data.frame(matrix(ncol = input_count, nrow = 0))
colnames(df) <- input_label
df[1, ] <- reactiveValuesToList(input)
predicted_output = predict(model, newdata = df)
if (modeltype == "log_reg"){
predicted_output = sigmoid(predicted_output)
}
paste(round(predicted_output, digits = 4))
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
}
shinify(model = log_reg, title = "fancy title" modeltype = "log_reg",)
shinify(model = log_reg, title = "fancy title", modeltype = "log_reg",)
shinify(log_reg,"fancy title", "log_reg",)
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Cmd + Shift + B'
#   Check Package:             'Cmd + Shift + E'
#   Test Package:              'Cmd + Shift + T'
shinify <- function(model, modeltype = "", title = "") {
#load required packages
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(shinythemes)){
install.packages("shinythemes")
library(shinythemes)
}
# set port for shiny server
options(shiny.port = 8000)
options(shiny.host = "0.0.0.0")
# set attr names from model (first = output, rest = input)
model_atributte <- paste(attr(model$terms, "predvars"))
model_label <- model_atributte[-1]
input_label <- model_label[-1]
input_count <- length(input_label)
# sigmoid function to correct output if using a log_reg
sigmoid = function(x){
result = exp(x)/(1+exp(x))
return(result)
}
# Define UI
ui <- fluidPage(
theme = shinytheme("lumen"),
titlePanel(title),
sidebarLayout(
sidebarPanel(
# multipe inputs depending on number of expeced regressors from the ml model
numinputs <- lapply(1:input_count, function(i) {
numericInput(inputId = paste0("num", i), label = input_label[i], value = 0)
})
),
# Output
mainPanel(
h2(model_label[1]),
h2(textOutput(outputId = "prediction")),
tags$a(href = "https://stackocean.com", "provided by stackOcean", target = "_blank")
)
)
)
# Define server function
server <- function(input, output) {
output$prediction <- renderText({
df <- data.frame(matrix(ncol = input_count, nrow = 0))
colnames(df) <- input_label
df[1, ] <- reactiveValuesToList(input)
predicted_output = predict(model, newdata = df)
if (modeltype == "log_reg"){
predicted_output = sigmoid(predicted_output)
}
paste(round(predicted_output, digits = 4))
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
}
shinify(log_reg,"fancy title", "log_reg",)
shinify(model = log_reg, title = "fancy title", modeltype = "log_reg")
setwd("~/Code/KISU/kisu-hosting")
